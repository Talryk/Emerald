{
  "description": "",
  "enabled": true,
  "items": [{
      "code": "let emerald = client.emerald\nvar mapper = emerald.mapper = {map: {}};\n\nmapper.roomWeights = JSON.parse(get_variable('emerald_mapper_roomweights')) || {\n  931: 999, //prime seren\n  1337: 999, //prime glom\n  4136: 999, //prime mag\n  4555: 999, //celestia\n  4607: 999, //nil\n  4710: 999, //etherseren\n  4847: 999, //etherglom,\n  4865: 999, //earth\n  11152: 999, //prime halli\n  11401: 999, //prime gaudi\n  19519: 999, //continuum\n  19526: 999, //vortex\n  19663: 999, //fire\n  19765: 999, //air\n};\n\nmapper.getArea = (vnum) => {\n  let areas = mapper.mapxml.querySelectorAll(\"area\");\n  let returnValue = '';\n  areas.forEach(a => {\n    if (a.getAttribute('id') == vnum) returnValue = a.getAttribute('name');\n  });\n  return returnValue;\n}\n\nmapper.getRoom = (roomName) => {\n  let rooms = mapper.mapxml.querySelectorAll(\"room\");\n  emerald.note.clear();\n  emerald.note.build('[Mapper]:','silver','seagreen',' ','silver','');\n  emerald.note.build(`Scanning ${String(mapper.mapxml.getElementsByTagName(\"room\").length)} rooms for \"`,emerald.configs.ui_white,'');\n  emerald.note.build(roomName, emerald.configs.ui_green, '', '\"...',emerald.configs.ui_white,'');\n  emerald.note.display();\n  let foundRooms = 0;\n  rooms.forEach(r => {\n    let t = r.getAttribute('title');\n    if (t.includes(roomName.toLowerCase())) {\n      let roomId = r.getAttribute('id');\n      let area = mapper.findArea(roomId);\n      emerald.note.clear();\n      emerald.note.build('[Mapper]:','silver','seagreen',' ','silver','');\n      emerald.note.build(`«go ${roomId}»v${roomId}`,emerald.configs.ui_green,'',': ',emerald.configs.ui_white,'');\n      emerald.note.build(r.getAttribute('title'),emerald.configs.ui_white,'');\n      emerald.note.build(' [',emerald.configs.ui_blue,'', area,emerald.configs.ui_green,'',']',emerald.configs.ui_blue,'');\n      emerald.note.display();\n      foundRooms++;\n    }\n  });\n  if (foundRooms == 0) {\n    emerald.emnote('ROOM NOT FOUND!','Mapper');\n    emerald.note.clear();\n  } else {\n    emerald.emnote(`Found ${foundRooms} matching rooms.`,'Mapper');\n  }\n}\n\nmapper.getPath = (origin, dest) => {\n  let r = mapper.mapxml.querySelector(`room#${origin}`)\n}\n\n//Load and parse map\nemerald.emnote('Cartographing the Basin of Life...', 'Mapper');\nmapper.loadmap = () => {\n  fetch('https://www.lusternia.com/maps/map.xml')\n  .then(res => {\n    if (!res.ok) {\n      emerald.emnote('Error retrieving master map.', 'Mapper');\n    }\n    return res.text();\n  })\n  .then(mapText => {\n    let t = String(mapText);\n    let parser = new DOMParser();\n    mapper.mapxml = parser.parseFromString(t, \"text/xml\");\n    emerald.emnote(`Successfully mapped ${mapper.mapxml.getElementsByTagName(\"room\").length} rooms in ${mapper.mapxml.getElementsByTagName(\"area\").length} areas.`,'Mapper');\n  })\n  .then(() => {\n    let rooms = mapper.mapxml.getElementsByTagName(\"room\");\n    rooms.forEach(r => {\n      let id = r.getAttribute('id');\n      mapper.rooms[id] = {\n        area: r.getAttribute('area'),\n        title: r.getAttribute('title'),\n        exits: {}\n      };\n      r.children.forEach(c => {\n        if (c.tagName === \"exit\") {\n          let dir = c.getAttribute('direction');\n          mapper.rooms[id].exits[dir] = {target : c.getAttribute('target'), weight: 1};\n          if (c.getAttribute('tgarea') !== null) {mapper.rooms[id].exits[dir][\"tgarea\"] = c.getAttribute('tgarea')}\n          /*mapper.rooms[35].exits[\"east\"] = {target: \"41\", weight: 1};\n          mapper.rooms = {\n            \"35\" : {\n              area: \"2\",\n              title: \"before Avechna the Avenger\"\n              exits: {\n                \"east\" : {\n                  target: \"41\",\n                  weight: 1\n                },\n                \"down\" : {\n                  target: \"6154\",\n                  weight: 1,\n                  tgarea: \"10\"\n                }\n              }\n            }\n          }*/\n        }\n      })\n    })\n  })\n  .catch(error => {\n    emerald.emnote(`Error parsing master map: ${error}`,'Mapper');\n  });\n}\n",
      "enabled": true,
      "name": "onInstall",
      "type": "function"
    }, {
      "code": "// Place any code here you'd like to autorun when the package is uninstalled",
      "enabled": true,
      "name": "onUninstall",
      "type": "function"
    }
  ],
  "name": "EmeraldMapper",
  "type": "group"
}
